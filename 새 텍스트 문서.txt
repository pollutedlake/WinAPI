※차후 진행하게 될 이자기에 대한 주의 점 + 방어 멘트 + 면접 요령은
이자기 시즌에 다뤄준다.

# 자기 소개 #

- 패스

# 이력서 검증 #

- 패스

# 자기 소개서 검증 #

- 패스

# 기술 면접 #

===============

01. 입사 동기?
ㄴ 왜 널 뽑아야 되나? 어필해 보시오.

02. 야근 여부와 의지에 대해..?
ㄴ 

03. 외국어 할줄 아는가?
ㄴ

★
04. 본인의 코딩 스타일은 어떤지? (협업.. ?)
ㄴ필요한 기능을 생각해보고 

05. 그렇다면 다른 사람의 코드를 리딩하는 실력은 어느정도라고 생각하는지..?
ㄴ

06. 절차지향과 객체지향의 차이점에 대해서 알고 있는지?
ㄴ 절차지향 c언어 구조적 프로그래밍 객체지향 오브젝트

07. 할로우 나이트? 혹은 메가맨 같은 플랫포머 게임을 해본적이 있는지?
해본적이 있다면 이와 비슷한 장르의 게임 충돌 처리는 어떻게 하면 효율적인지?
ㄴ 메가맨 픽셀충돌

★★★★★★★★★
08. C / C++를(C#) 사용했다고 알고 있는데 사용한 이유는?
ㄴ 메모리에 직접 접근할 수 있는 장점. STL. 상용 엔진의 내부 구조는 C / C++/ Direct 로 되어있다.

09. 라이프 사이클에 대해서? (변수, 함수)
ㄴ Allocate -> Release -> Memory Pool
ㄴ 변수 선언 시 메모리가 할당이 되고 스코프가 끝나면 해제되어 사용가능한 메모리 풀에 반환된다.

10. 게임 프로그래머가 되고 싶은 이유?
ㄴ 어릴적 경험과 엮자/ 전공과 게임을 잘해서 하지 말자

★
11. 그러면 어떤 노력을 했는지?
ㄴ 언어, 엔진 

12. 그럼 읽고 있는 전공책이 있는지?
ㄴ 코드적으로 어느 부분이 좋았는지/기본서적은 제외/ C++ - 모던 C++, 용책, direct9 - 해골책, 물방울책, 노을책, 공룡책(Operating System Concepts) - 운영체제
공룡책(Operating System Concepts) - 운영체제, 제가 학원을 다니면서 책을 포트폴리오와 수업을 병행하고 있어 참고서적으로 보기 시작했습니다.

13. 동료들과 의사 소통에 차이가 있을 때 본인의 대처 방식은?
ㄴ 근거와 결과 원인를 바탕으로 상대방을 배려해서 내 주장을 이야기 한다.

14. 객체지향의 5대 설계원칙에 대해 설명해 보시오.
ㄴ SRP(단일 책임 원칙), OCP(개방-폐쇄 원칙), LSP(리스코프 치환 원칙), ISP(인터페이스 분리 원칙), DIP(의존 역전 원칙)

15. 스택과 힙의 차이점 및 설명? -> 용량? -> 가상 메모리?
ㄴ 스택 선입후출, 함수의 주소값을 가지고 있는 data structrue, 힙 사용자가 동적할당하는 메모리 램의 80% 용량 그거보다 더 필요하면 가상메모리가 들어온다. 부족하면 하드 디스크에서 가져온다.

16. 밸류 타입과 레퍼런스 타입에 대해 설명해 보시오.
ㄴ 단점? NULL체크 많이 해야 한다.
ㄴ int** &number = &pa; 오류 뜬다.

17. 프로그래밍에 여러 분야중 본인이 가장 관심있고 해보고 싶은 분야가 있다면?
ㄴ 그래픽스에 대한 이야기가 나오면 좋다. 서버가 나오면 데이터베이스를 관리할 수 있는 효율적인 툴 SQL, 최적화
ㄴ 그래픽스->쉐이더 프로그램->선형대수학에 대한 질문
ㄴ 최적화->자료구조, 알고리즘

★★★★★ 역질문 ★★★★★
18. 마지막으로 회사에 질문할거 있는지? (최소 3가지 이상)
ㄴ 합격이 된다면 어떤 업무를 맡게 되는지, 그 업무에 대해 미리 준비해가면 좋은 점, 

19. C++과 C#의 차이점에 대해 설명해 보시오.
ㄴ 메모리 관리, 컴파일러 유무(엔진레벨에서는 유니티, 언리얼, 둘다 컴파일러가 없다.), C++은 독립적인 성향이 강하고 C#은 .NET의 영향이 강하다. C#은 관심은 있어서 어느정도 알고 있다 스탠스
ㄴ 파생 질문 : 각 언어의 배열 선언 방법은?
ㄴ int number[]; -> C++
ㄴ int[] = new []; -> C#

20. 구조체와 클래스의 차이?
ㄴ 접근제어 지시자 차이, 어셈블리 영역에서 별다른 선언없이 접근이 가능하냐 안하냐

21. 앱실론이 무엇인가? 왜 사용하는가? 왜 오차가 날 수 있는가?
ㄴ 오차범위, 반올림 오차

22. 오버로딩과 오버라이딩의 개념 및 차이점
ㄴ 중복정의와 재정의의 차이

23. 다중 상속에 대한 질문 (C++ / C# -> 1. 가능한지? 2. 왜 안되는지?)
ㄴ C++은 가능 C#은 안됨. 왜 지양해야할까?
ㄴ 소멸자의 호출 순서를 정의하기가 매우 어렵다. 각 객체의 고유성이 없어 include가 안된다.

24. virtual 키워드 동작 방식
ㄴ virtual 키워드는 가상함수를 뜻한다. 가상함수에는 함수의 몸체를 정의하지 않는 순수가상함수(추상화)와 정의를 하는 일반 가상함수로 나눌 수 있다.
런타임 직전에 참조하는 테이블 확인

25. virtual 멤버 함수에 대해서
ㄴ 

26. 가상함수 Table에 대한 설명?
ㄴ 객체 타입에 따른 함수포인터가 나열된 테이블

27. New / Malloc 개념과 차이점? 그리고 Table과 연관관계는?
ㄴ New 생성자 자동호출 인스턴스를 만들어준다.

28. 순수가상함수를 만들면 메모리상에 몇 바이트 차지하는가?
ㄴ 0, 함수 구현이 되어야지만 메모리 크기가 잡힌다.

-> 스타트 + 중소 = 연봉++ // 중견 + 대기업  = 기본
29. 가상함수 테이블을 만들 때 메모리상에서 일어나는 과정을 설명해 보시오.
ㄴ 결합, 정적 바인딩, 동적 바인딩
ㄴ 가상함수 테이블이 결합이 되므로 시작 시에 정적 바인딩이 실행 런 타임이 지나면서 함수 포인터를 활용한 동적 바인딩으로 바뀐다.
ㄴ 가상함수 테이블을 가리키는 포인터가 클래스의 멤버변수로 만들어져 가상함수테이블과 클래스가 정적바인딩으로 결합이 되고 런타임시에 객체의 타입에 따라 가상함수테이블포인터로 가상함수를 접근하기 때문에 동적 바인딩으로 바뀝니다.

마지막 면접이 끝나고 -> 면접을 본 적이 적고 긴장을 많이 해서 그런데 오늘 면접에서 개선해야 할 점이 있으면 알려주시면 감사하겠습니다.
